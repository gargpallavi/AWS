################################################################################
# Define the AWS Resources.
################################################################################
Resources:

  CodeCommitRepository:
    Description: A repository for the Source Code
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: !Ref RepositoryDescription
      RepositoryName: !Ref RepoName

  ServiceRoleForCodeBuild:
    Description: CodeBuild would need this service role to do its job.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - 
          Effect: "Allow"
          Principal: 
            Service: 
              - "codebuild.amazonaws.com"
          Action: 
            - "sts:AssumeRole"
      Policies:
        - 
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${BuildProjectName}
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${BuildProjectName}:*
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents

              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
                  
                Action:
                - s3:PutObject
                - s3:GetObject
                - s3:GetObjectVersion

              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${BuildProjectName}
                  
                Action:
                - codecommit:GitPull

  CodeBuildProject:
    Description: AWS CodeBuild project to build the Source Code
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref BuildProjectName
      Description: !Ref BuildProjectDescription
      Artifacts: 
        Type: CODEPIPELINE
      Environment:
        ComputeType: !Sub BUILD_GENERAL1_${ComputeType}
        Image: !Ref BuildEnvironmentImage
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt ServiceRoleForCodeBuild.Arn
      Source: 
        Type: CODEPIPELINE
      Tags:
      - Key: Name
        Value: !Ref BuildProjectName

  CodeDeployApplication:
    Description: AWS CodeDeploy Application for deploying the build artifacts.
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Server

  DeploymentConfiguration:
    Description: Define a Deployment Configuration that deploys to 25% of the fleet at a time.
    Type: AWS::CodeDeploy::DeploymentConfig
    Properties: 
      MinimumHealthyHosts: 
        Type: "FLEET_PERCENT"
        Value: 75      

  CodeDeploymentGroup:
    Description: Code deployment group that would deploy to a given tag
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplicationName
      DeploymentConfigName: !Ref DeploymentConfiguration
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentStyle: 
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      Ec2TagFilters:
        Type: KEY_AND_VALUE
        Key: !Ref DeploymentKeyName
        Value: !Ref DeploymentKeyValue

  CodeDeployRole:
    Description: Role with managed policy AWSCodeDeployRole 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - 
          Effect: "Allow"
          Principal: 
            Service: 
              - "codedeploy.amazonaws.com"
          Action: 
            - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRole 
        
  VirtualPrivateCloud:
    Description: The VPC in which the Jenkins Server would be created.
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Application-VPC

  PublicSubnet:
    Description: Public Subnet in for launching the Jenkins Server
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      CidrBlock: 
        Fn::Select:
          - 0
          - Fn::Cidr:
            - !Ref VPCCidrBlock
            - 2
            - 8 
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Public-subnet  

  InternetGateway:
    Description: Internet Gateway for the VPC
    Type: AWS::EC2::InternetGateway

  AttachInternetGateway:
    Description: Attach Internet Gateway to the VPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      InternetGatewayId: !Ref InternetGateway

  InternetRouteTable:
    Description: A route table with a route to the Internet.
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      Tags:
      - Key: Name
        Value: Public-Route-Table

  RouteToIGW:
    Description: Defines a route to the internet in InternetRouteTable.
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref InternetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  AssociatePublicRouteTableWithPublicSubnet:
    Description: Associate InternetRouteTable to PublicSubnet, so that it becomes a public subnet.
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref PublicSubnet      
  
  JenkinsRole:
    Description: Role with wo policies - 1. AWSCodePipelineCustomActionAccess, 2. IAM policy to manage builds from Jenkins through CodeBuild on the specified repository
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - 
          Effect: "Allow"
          Principal: 
            Service: 
              - "ec2.amazonaws.com"
          Action: 
            - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineCustomActionAccess
      Policies:
        - 
          # The following section defines an IAM policy to manage builds from Jenkins through CodeBuild on the specified repository 
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${BuildProjectName}
                Action:
                - codebuild:BatchGetBuilds
                - codebuild:BatchGetProjects
                - codebuild:StartBuild
              
              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${BuildProjectName}:*
                  
                Action:
                - logs:GetLogEvents

              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
                  
                Action:
                - s3:GetObject

              - 
                Effect: "Allow"
                Resource: 
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${BuildProjectName}
                  
                Action:
                - codecommit:BatchGetRepositories
                - codecommit:Get*
                - codecommit:List*
                - codecommit:CreateRepository
                - codecommit:CreateBranch
                - codecommit:DeleteBranch
                - codecommit:Put*
                - codecommit:Test*
                - codecommit:Update*
                - codecommit:GitPull
                - codecommit:GitPus

              - 
                Effect: "Allow"
                Resource: 
                  - "*"
                  
                Action:
                - sns:Publish

  JenkinsInstanceProfile:
    Description: Instance profile for the jenkins server
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref JenkinsRole

  JenkinsServer:
    Description: An ec2 instance with Jenkins installed.
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref JenkinsInstanceProfile
      SecurityGroupIds:
        - !Ref JenkinsSecurityGroup
        - !Ref SSHOnlySecurityGroup
      Tags:
        - Key: Name
          Value: Jenkins-Server
      
  JenkinsSecurityGroup:
    Description: Security Group allowing Jenkins traffic from specified IP address.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow traffic on port 8080 from the specified IP CIDR range"
      VpcId: !Ref VirtualPrivateCloud
      SecurityGroupIngress:
        - CidrIp: !Ref CidrRange
          FromPort: '8080'
          IpProtocol: tcp
          ToPort: '8080'
        - CidrIp: 0.0.0.0/0
          FromPort: '8443'
          IpProtocol: tcp
          ToPort: '8443'
      Tags:
        - Key: Name
          Value: sg-jenkins
      
  SSHOnlySecurityGroup:
    Description: Security Group allowing users to securely access the instance.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH traffic"
      VpcId: !Ref VirtualPrivateCloud
      SecurityGroupIngress:
        - CidrIp: !Ref CidrRange
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
      Tags:
        - Key: Name
          Value: sg-ssh-only

################################################################################
# Define the Input Parameters.
################################################################################
Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:

      - Label:
          default: "Jenkins Server"
        Parameters:
          - VPCCidrBlock
          - ImageId
          - InstanceType
          - KeyName
          - CidrRange

      - Label:
          default: "AWS CodeCommit Repository"
        Parameters:
          - RepoName
          - RepositoryDescription

      - Label:
          default: "AWS CodeBuild Project"
        Parameters:
          - BuildProjectName
          - BuildProjectDescription

      - Label:
          default: "Build Environment"
        Parameters:          
          - ComputeType
          - BuildEnvironmentImage

      - Label:
          default: "AWS CodeDeploy Application"
        Parameters:
          - CodeDeployApplicationName
          - DeploymentKeyName
          - DeploymentKeyValue

Parameters:

  VPCCidrBlock:
    Description: VPC CIDR block for the VPC to be created.
    Type: String
    Default: 172.99.0.0/16

  ImageId:
    Description: An ami for the Jenkins server.
    Type: String

  InstanceType:
    Description: Instance size of the Jenkins server.
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    Default: t2.micro
    ConstraintDescription: Must be a valid T2 type instance.
  
  KeyName:
    Description: A key-pair to connect to the Jenkins server.
    Type: AWS::EC2::KeyPair::KeyName

  CidrRange:
    Description: An IP CIDR range from which the Jenkins server could be accessed through port 8080
    Type: String
    Default: 0.0.0.0/0
    ConstraintDescription: Must be a valid ip range.

  RepoName:
    Description: Name of the source code repository
    Type: String
    Default: DemoCodeCommitRepository
    MinLength: 3
    MaxLength: 40
    ConstraintDescription: Must be between 3 and 40 characters in length. 
    
  RepositoryDescription:
    Description: A short description of the repository within 200 characters.
    Type: String
    MaxLength: 200
    ConstraintDescription: Must be less than 200 characters in length. 

  BuildProjectName:
    Description: Name of the build project
    Type: String
    Default: DemoCodeBuildProject
    MinLength: 3
    MaxLength: 40
    ConstraintDescription: Must be between 3 and 40 characters in length. 

  BuildProjectDescription:
    Description: A short description of the build project, within 200 characters.
    Type: String
    MaxLength: 200
    ConstraintDescription: Must be less than 200 characters in length. 

  ComputeType:
    Description: Compute environment for build
    Type: String
    Default: SMALL
    AllowedValues:
    - SMALL
    - MEDIUM
    - LARGE
    ConstraintDescription: Compute environment small, medium or large

  BuildEnvironmentImage:
    Description: Select the run-time environment for the build. Currently, only Ubuntu Linux environment available for this selection.
    Type: String
    Default: aws/codebuild/java:openjdk-8
    AllowedValues:
    - aws/codebuild/java:openjdk-8
    - aws/codebuild/java:openjdk-9
    - aws/codebuild/nodejs:10.1.0
    - aws/codebuild/nodejs:8.11.0
    - aws/codebuild/nodejs:6.3.1
    - aws/codebuild/php:5.6
    - aws/codebuild/php:7.0
    - aws/codebuild/python:3.6.5
    - aws/codebuild/python:3.5.2
    - aws/codebuild/python:3.4.5
    - aws/codebuild/python:3.3.6
    - aws/codebuild/python:2.7.12
    - aws/codebuild/ruby:2.5.1
    - aws/codebuild/ruby:2.3.1
    - aws/codebuild/ruby:2.2.5
    - aws/codebuild/golang:1.10
    - aws/codebuild/docker:17.09.0
    - aws/codebuild/android-java-8:26.1.1
    - aws/codebuild/android-java-8:24.4.1
    ConstraintDescription: Currently, only Ubuntu Linux environment available for this selection. 

  CodeDeployApplicationName:
    Description: A name for the AWS CodeDeploy application
    Type: String
    Default: DemoCodeDeployApplication
    MinLength: 3
    MaxLength: 40
    ConstraintDescription: Should be between 3 to 40 characters in length.

  DeploymentKeyName:
    Description: The Tag's keyname of the ec2 instances on which deployment would occur.
    Type: String

  DeploymentKeyValue:
    Description: The Tag's key value of the ec2 instances on which deployment would occur.
    Type: String

################################################################################
# Define the Outputs.
################################################################################
Outputs:

  JenkinsURL:
    Description: URL to access the Jenkins server
    Value: 
      Fn::Join: [ ":", [ !GetAtt JenkinsServer.PublicDnsName, 8080 ] ]
      
  JenkinPublicIP:
    Description: Public IP address of the Jenkins Server. This can be used to connect over SSH.
    Value: !GetAtt JenkinsServer.PublicIp

  RepositoryCloneUrlHTTP:
    Description: The URL to use for cloning the repository over HTTPS
    Value: !GetAtt CodeCommitRepository.CloneUrlHttp

  RepositoryCloneUrlSSH:
    Description: The URL to use for cloning the repository over SSH
    Value: !GetAtt CodeCommitRepository.CloneUrlSsh

