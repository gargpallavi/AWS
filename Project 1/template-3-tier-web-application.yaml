################################################################################
# Define the AWS Resources.
################################################################################
Resources:

  VirtualPrivateCloud:
    Description: The VPC inside which all resources would be created.
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.1.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Application-VPC

  PublicSubnet1:
    Description: Public Subnet in Availability Zone 1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      CidrBlock: 172.1.1.0/24
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Public-Subnet1          

  PublicSubnet2:
    Description: Public Subnet in Availability Zone 1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      CidrBlock: 172.1.3.0/24
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Public-Subnet2          

  PrivateSubnet1:
    Description: Private Subnet in Availability Zone 1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      CidrBlock: 172.1.2.0/24
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""          
      Tags:
        - Key: Name
          Value: Private-Subnet1

  PrivateSubnet2:
    Description: Private Subnet in Availability Zone 1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      CidrBlock: 172.1.4.0/24
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""          
      Tags:
        - Key: Name
          Value: Private-Subnet2

  InternetGateway:
    Description: Internet Gateway for the VPC
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Description: Attach Internet Gateway with the VPC.
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      InternetGatewayId: !Ref InternetGateway 

  InternetRouteTable:
    Description: A route table with a route to the Internet.
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      Tags:
      - Key: Name
        Value: Public-Route-Table

  RouteToIGW:
    Description: Defines a route to the internet in InternetRouteTable.
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InternetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  AssociatePublicRouteTableWithPublicSubnet1:
    Description: Associate InternetRouteTable to PublicSubnet1, so that it becomes a public subnet.
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref PublicSubnet1
      
  AssociatePublicRouteTableWithPublicSubnet2:
    Description: Associate InternetRouteTable to PublicSubnet2, so that it becomes a public subnet.
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref PublicSubnet2
      
  ApplicationServer1:
    Description: Web-server tier EC2 instance
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ApplicationImageId
      InstanceType: !Ref ApplicationInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref InternalSSHOnlySecurityGroup
      Tags:
        - Key: Name
          Value: Application-Instance-1

  ApplicationServer2:
    Description: Web-server tier EC2 instance
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ApplicationImageId
      InstanceType: !Ref ApplicationInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref InternalSSHOnlySecurityGroup
      Tags:
        - Key: Name
          Value: Application-Instance-2

  WebServerSecurityGroup:
    Description: Security Group allowing web traffic from across the globe.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP and HTTPS traffic from the open internet"
      VpcId: !Ref VirtualPrivateCloud
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: 0.0.0.0/0
          FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
      Tags:
        - Key: Name
          Value: SG-WebServer
          
  InternalSSHOnlySecurityGroup:
    Description: Security Group allowing users to securely access the instance.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH traffic"
      VpcId: !Ref VirtualPrivateCloud
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
      Tags:
        - Key: Name
          Value: SG-SSH-Only

  ApplicationLoadBalancer:
    Description: Load Balancer for the application.
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachGateway
    Properties:
      Type: application
      IpAddressType: ipv4
      Name: awesomeapp
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: Application-Load-Balancer

  TargetGroupForApplicationLoadBalancer:
    Description: Define the Target Group for Application Load Balancer.
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VirtualPrivateCloud
      TargetType: instance
      Targets:
        - Id: !Ref ApplicationServer1
        - Id: !Ref ApplicationServer2

  ListenerForApplicationLoadBalancer:
    Description: Create a listener for the Application Load Balancer.
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref TargetGroupForApplicationLoadBalancer
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

################################################################################
# Define the Input Parameters
################################################################################
Parameters:

  KeyName:
    Description: A Key Pair that could be used to access the EC2 instance.
    Type: AWS::EC2::KeyPair::KeyName

  ApplicationImageId:
    Description: AMI id to be used for launching the instance.
    Type: String

  ApplicationInstanceType:
    Description: Instance Type to be launched. Use t2.micro for free-tier.
    Type: String
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    Default: t2.micro
    ConstraintDescription: Must be a valid T2 type instance.


